from aiogram import Router, F
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import StatesGroup, State
from aiogram.types import Message, CallbackQuery
from aiogram.utils.markdown import hbold

from app.bot.keyboards import (
    select_lesson_type,
    select_day,
    today,
    tomorrow,
    select_lesson_number,
    select_place,
    select_yes_or_no,
    select_preferred_start_time,
    select_preferred_instructor,
    accept_or_change_registration
)

router = Router()


class RegForALesson(StatesGroup):
    select_lesson_type = State()
    select_lesson_date = State()
    select_lesson_number = State()
    select_place = State()
    select_theory = State()
    select_preferred_start_time = State()
    select_preferred_instructor = State()
    accept_or_change_registration = State()
    registration_done = State()


@router.message(Command('registration_for_a_lesson'))
async def command_registration_for_a_lesson(msg: Message, state: FSMContext) -> None:
    await state.clear()

    await msg.answer(f'–ù–∞ –∫–∞–∫–æ–π –≤–∏–¥ –∑–∞–Ω—è—Ç–∏—è –í—ã —Ö–æ—Ç–∏—Ç–µ –∑–∞–ø–∏—Å–∞—Ç—å—Å—è?',
                     reply_markup=select_lesson_type)

    await state.set_state(RegForALesson.select_lesson_type)


@router.callback_query(
    RegForALesson.select_lesson_type
)
async def set_select_lesson_type(callback_query: CallbackQuery, state: FSMContext):

    await state.update_data(lesson_type=callback_query.data)

    await callback_query.bot.edit_message_text(
        text=f'–ù–∞ –∫–∞–∫–æ–π –¥–µ–Ω—å –≤—ã —Ö–æ—Ç–∏—Ç–µ –∑–∞–ø–∏—Å–∞—Ç—å—Å—è?',
        chat_id=callback_query.message.chat.id,
        message_id=callback_query.message.message_id,
        reply_markup=select_day
    )

    await state.set_state(RegForALesson.select_lesson_date)


@router.callback_query(
    RegForALesson.select_lesson_date
)
async def set_select_lesson_date(callback_query: CallbackQuery, state: FSMContext):
    if callback_query.data == 'today_lesson':
        date = today
    else:
        date = tomorrow

    await state.update_data(lesson_date=date)

    await callback_query.bot.edit_message_text(
        text=f'–í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–º–µ—Ä –∑–∞–Ω—è—Ç–∏—è –∏–∑ –ø–∞–∫–µ—Ç–∞:',
        chat_id=callback_query.message.chat.id,
        message_id=callback_query.message.message_id,
        reply_markup=select_lesson_number
    )

    await state.set_state(RegForALesson.select_lesson_number)


@router.callback_query(
    RegForALesson.select_lesson_number
)
async def set_select_lesson_date(callback_query: CallbackQuery, state: FSMContext):
    await state.update_data(lesson_number=callback_query.data)

    await callback_query.bot.edit_message_text(
        text=f'–í—ã–±–µ—Ä–∏—Ç–µ –º–µ—Å—Ç–æ —É—Ä–æ–∫–∞:',
        chat_id=callback_query.message.chat.id,
        message_id=callback_query.message.message_id,
        reply_markup=select_place
    )

    await state.set_state(RegForALesson.select_place)


@router.callback_query(
    RegForALesson.select_place
)
async def set_select_lesson_place(callback_query: CallbackQuery, state: FSMContext):
    await state.update_data(lesson_place=callback_query.data)

    await callback_query.bot.edit_message_text(
        text='–£ —Ç–µ–±—è —É–∂–µ –±—ã–ª–∞ —Ç–µ–æ—Ä–∏—è?',
        chat_id=callback_query.message.chat.id,
        message_id=callback_query.message.message_id,
        reply_markup=select_yes_or_no
    )

    await state.set_state(RegForALesson.select_theory)


@router.callback_query(
    RegForALesson.select_theory
)
async def set_select_theory(callback_query: CallbackQuery, state: FSMContext):
    if callback_query.data == 'no':
        user_data = await state.get_data()
        await state.update_data(lesson_place=f'{user_data.get('lesson_place')} + —Ç–µ–æ—Ä–∏—è')

    await callback_query.bot.edit_message_text(
        text='–í—ã–±–µ—Ä–∏ –ø—Ä–µ–¥–ø–æ—á—Ç–∏—Ç–µ–ª—å–Ω–æ–µ –≤—Ä–µ–º—è.\n'
             '–ù–æ –∫ —Å–æ–∂–∞–ª–µ–Ω–∏—é –Ω–µ –≤—Å–µ–≥–¥–∞ –ø–æ–ª—É—á–∞–µ—Ç—Å—è –ø–æ–¥—Å—Ç—Ä–æ–∏—Ç—å –ø–æ–¥ –Ω–µ–≥–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ üòî',
        chat_id=callback_query.message.chat.id,
        message_id=callback_query.message.message_id,
        reply_markup=select_preferred_start_time
    )

    await state.set_state(RegForALesson.select_preferred_start_time)


@router.callback_query(
    RegForALesson.select_preferred_start_time
)
async def set_select_preferred_start_time(callback_query: CallbackQuery, state: FSMContext):
    await state.update_data(lesson_start_time=callback_query.data)

    await callback_query.bot.edit_message_text(
        text='–í—ã–±–µ—Ä–∏ –∫–∞–∫–æ–º—É –∏–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä—É —Ö–æ—Ç–µ–ª–æ—Å—å –±—ã –ø–æ–ø–∞—Å—Ç—å.\n'
             '–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é –∏ –ø–æ–¥ –Ω–µ–≥–æ –Ω–µ –≤—Å–µ–≥–¥–∞ –ø–æ–ª—É—á–∞–µ—Ç—Å—è –ø–æ–¥—Å—Ç—Ä–æ–∏—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ üòî',
        chat_id=callback_query.message.chat.id,
        message_id=callback_query.message.message_id,
        reply_markup=select_preferred_instructor
    )

    await state.set_state(RegForALesson.select_preferred_instructor)


@router.callback_query(
    RegForALesson.select_preferred_instructor
)
async def set_select_preferred_instructor(callback_query: CallbackQuery, state: FSMContext):
    await state.update_data(lesson_instructor=callback_query.data)

    user_data = await state.get_data()
    text = (f'–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ —Å–≤–æ—é –∑–∞–ø–∏—Å—å:\n'
            f'–í–∏–¥ - {hbold(user_data.get('lesson_type'))}\n'
            f'–î–µ–Ω—å - {hbold(user_data.get('lesson_date'))}\n'
            f'–ù–æ–º–µ—Ä - {hbold(user_data.get('lesson_number'))}\n'
            f'–ú–µ—Å—Ç–æ - {hbold(user_data.get('lesson_place'))}\n'
            f'–í—Ä–µ–º—è - {hbold(user_data.get('lesson_start_time'))}\n'
            f'–ò–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä - {hbold(user_data.get('lesson_instructor'))}\n'
            )

    await callback_query.bot.edit_message_text(
        text=text,
        chat_id=callback_query.message.chat.id,
        message_id=callback_query.message.message_id,
        reply_markup=accept_or_change_registration
    )

    await state.set_state(RegForALesson.accept_or_change_registration)


@router.callback_query(
    RegForALesson.accept_or_change_registration,
    F.data == 'accept_registration'
)
async def set_accept_registration(callback_query: CallbackQuery, state: FSMContext):
    # TODO save to db
    user_data = await state.get_data()
    text = (f'–ü–æ–∑–¥—Ä–∞–≤–ª—è—é! –í—ã –∑–∞–ø–∏—Å–∞–Ω—ã –Ω–∞ –∑–∞–Ω—è—Ç–∏–µ:\n'
            f'–í–∏–¥ - {hbold(user_data.get('lesson_type'))}\n'
            f'–î–µ–Ω—å - {hbold(user_data.get('lesson_date'))}\n'
            f'–ù–æ–º–µ—Ä - {hbold(user_data.get('lesson_number'))}\n'
            f'–ú–µ—Å—Ç–æ - {hbold(user_data.get('lesson_place'))}\n'
            f'–í—Ä–µ–º—è - {hbold(user_data.get('lesson_start_time'))}\n'
            f'–ò–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä - {hbold(user_data.get('lesson_instructor'))}\n'
            )

    await callback_query.bot.edit_message_text(
        text=text,
        chat_id=callback_query.message.chat.id,
        message_id=callback_query.message.message_id
    )

    await state.set_state(RegForALesson.registration_done)


@router.callback_query(
    RegForALesson.accept_or_change_registration,
    F.data == 'change_registration'
)
async def set_change_registration(callback_query: CallbackQuery, state: FSMContext):
    await state.clear()

    await callback_query.bot.edit_message_text(
        text=f'–ù–∞ –∫–∞–∫–æ–π –≤–∏–¥ –∑–∞–Ω—è—Ç–∏—è –í—ã —Ö–æ—Ç–∏—Ç–µ –∑–∞–ø–∏—Å–∞—Ç—å—Å—è?',
        chat_id=callback_query.message.chat.id,
        message_id=callback_query.message.message_id,
        reply_markup=select_lesson_type
    )

    await state.set_state(RegForALesson.select_lesson_type)
